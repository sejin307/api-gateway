def globalConfig = [
        javaHome: '/usr/lib/jvm/java-17-amazon-corretto',
        ecrRepository: '269923429649.dkr.ecr.ap-northeast-2.amazonaws.com/api-gw-dev',
        ecsClusterName: 'DEV-Cengroup-APIGW-Cluster',
        ecsServiceName: 'DEV-CEN_APIGW_SVC',
        containerName: 'DEV-CEN-APIGW-Task',
        containerDefName: 'dev-api-gw',
        logGroup: '/ecs/DEV-CEN-APIGW-Task',
        region: 'ap-northeast-2',
        ecrCredential: 'ecr:ap-northeast-2:api-gw-dev',
        jenkinsCredentialId: 'dev-api-gw'
]

node {
    stage('========== Checkout Repository ==========') {
        checkout scm
    }

    stage('========== Setup JDK and Build Application ==========') {
        withEnv(["JAVA_HOME=${globalConfig.javaHome}", "PATH+JAVA=${globalConfig.javaHome}/bin"]) {
            sh 'chmod +x ./gradlew'
            sh './gradlew clean build'
        }
    }

    stage('========== Build Image ==========') {
        app = docker.build(globalConfig.ecrRepository, ".")
    }

    stage('========== Push Image ==========') {
        docker.withRegistry("https://${globalConfig.ecrRepository}", globalConfig.ecrCredential) {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }

    stage('========== Update ECS Service ==========') {
        withAWS(credentials: globalConfig.jenkinsCredentialId) {
            def image = "${globalConfig.ecrRepository}:${env.BUILD_NUMBER}"
            def taskDefinitionJson = """
        {
            "family": "${globalConfig.containerName}",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "executionRoleArn": "arn:aws:iam::269923429649:role/ecsTaskExecutionRole",
            "cpu": "2048",
            "memory": "4096",
            "containerDefinitions": [
                {
                    "name": "${globalConfig.containerDefName}",
                    "image": "${image}",
                    "cpu": 2048,
                    "memory": 4096,
                    "essential": true,
                    "environment": [
                        {"name": "spring.profiles.active", "value": "dev"}
                    ],
                    "portMappings": [
                        {"containerPort": 8080, "protocol": "tcp"}
                    ],
                    "logConfiguration": {
                        "logDriver": "awslogs",
                        "options": {
                            "awslogs-group": "${globalConfig.logGroup}",
                            "awslogs-region": "${globalConfig.region}",
                            "awslogs-stream-prefix": "ecs"
                        }
                    }
                }
            ]
        }
        """.stripIndent()

            def registerTaskDefCmd = "aws ecs register-task-definition --region '${globalConfig.region}' --tags key=Service,value=dev-api-gw --cli-input-json '${taskDefinitionJson}'"
            def taskDefOutput = sh(script: registerTaskDefCmd, returnStdout: true).trim()
            def taskDefJson = readJSON text: taskDefOutput
            def newRevision = taskDefJson.taskDefinition.revision
            def taskDefinitionArn = taskDefJson.taskDefinition.taskDefinitionArn

            // Task Definition 태그 등록
            sh "aws ecs tag-resource --resource-arn \"${taskDefinitionArn}\" --region '${globalConfig.region}' --tags key=Service,value=dev-api-gw"

            def taskDefinition = "${globalConfig.containerName}:${newRevision}"
            sh "aws ecs update-service --cluster \"${globalConfig.ecsClusterName}\" --service \"${globalConfig.ecsServiceName}\" --task-definition \"${taskDefinition}\" --region \"${globalConfig.region}\""
        }
    }

}
