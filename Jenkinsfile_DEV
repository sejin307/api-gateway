// 전역 변수 선언
def globalConfig = [
        javaHome: '/usr/lib/jvm/java-17-amazon-corretto',
        ecrRepository: '269923429649.dkr.ecr.ap-northeast-2.amazonaws.com/api-gw-dev',
        ecsClusterName: 'DEV-Cengroup-APIGW-Cluster',
        ecsServiceName: 'DEV-CEN_APIGW_SVC',
        containerName: 'DEV-CEN-APIGW-Task',
        containerDefName: 'dev-api-gw',
        logGroup: '/ecs/DEV-CEN-APIGW-Task',
        region: 'ap-northeast-2'
]

node {
    stage('========== Checkout Repository ==========') {
        checkout scm
    }

    stage('========== Setup JDK and Build Application ==========') {
        withEnv(["JAVA_HOME=${globalConfig.javaHome}", "PATH+JAVA=${globalConfig.javaHome}/bin"]) {
            sh 'chmod +x ./gradlew'
            sh './gradlew clean build'
        }
    }

    stage('========== Build Image ==========') {
        app = docker.build(globalConfig.ecrRepository, ".")
    }

    stage('========== Push Image ==========') {
        docker.withRegistry("https://${globalConfig.ecrRepository}", 'ecr:${globalConfig.region}:${globalConfig.ecrRepository.split("/")[0]}') {
            app.push("${env.BUILD_NUMBER}")
            app.push("latest")
        }
    }

    stage('========== Update ECS Service ==========') {
        withAWS(region: globalConfig.region, credentials: 'dev-api-gw') {
            def image = "${globalConfig.ecrRepository}:${env.BUILD_NUMBER}"

            def logOptions = [
                    'awslogs-group': globalConfig.logGroup,
                    'awslogs-region': globalConfig.region,
                    'awslogs-stream-prefix': 'ecs'
            ]

            def containerDefinitions = [
                    [
                            name: globalConfig.containerDefName,
                            image: image,
                            cpu: 2048,
                            memory: 4096,
                            essential: true,
                            environment: [[name: 'spring.profiles.active', value: 'dev']],
                            portMappings: [[containerPort: 8080, protocol: 'tcp']],
                            logConfiguration: [logDriver: 'awslogs', options: logOptions]
                    ]
            ]

            def taskDef = ecsRegisterTaskDefinition(
                    family: globalConfig.containerName,
                    networkMode: "awsvpc",
                    requiresCompatibilities: ["FARGATE"],
                    executionRoleArn: "arn:aws:iam::269923429649:role/ecsTaskExecutionRole",
                    cpu: '2048',
                    memory: '4096',
                    containerDefinitions: containerDefinitions
            )

            def newRevision = taskDef.taskDefinition.revision
            def taskDefinitionArn = taskDef.taskDefinition.taskDefinitionArn

            // Task Definition 태그 등록
            ecsTagResource(resourceArn: taskDefinitionArn, tags: [key: 'Service', value: 'dev-api-gw'])

            def taskDefinition = "${globalConfig.containerName}:${newRevision}"
            ecsUpdateService(cluster: globalConfig.ecsClusterName, service: globalConfig.ecsServiceName, taskDefinition: taskDefinition)
        }
    }
}
