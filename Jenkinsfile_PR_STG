pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '60'))
    }

    parameters {
        string(name: 'DEPLOY_PROFILE_NAME', defaultValue: 'development', description: 'local, development, production')
    }

    environment {
        MAVEN_HOME = '/usr/share/maven'
    }

    stages {
        stage('========== Checkout Repository ==========') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'http://13.125.140.31/api-gw/pr-configuration.git', credentialsId: 'PR-Deploy']]])
                    checkout([$class: 'GitSCM', branches: [[name: '*/main']], userRemoteConfigs: [[url: 'http://13.125.140.31/api-gw/pr.git', credentialsId: 'PR-Deploy']]])
                }
            }
        }

        stage('========== Build Application ==========') {
            steps {
                script {
                    // Maven을 사용하여 프로젝트 빌드
                    sh "${MAVEN_HOME}/bin/mvn clean install -P${env.DEPLOY_PROFILE_NAME} -Dmaven.test.skip=true"
                }
            }
        }

        stage('========== Deploy Application ==========') {
            steps {
                script {
                    // Maven 배포 외부에서 실행
                    def warFileName = sh(script: 'ls target/*.war', returnStdout: true).trim()
                    sh """
                        curl --user admin:admin123\$ \
                            --upload-file /${warFileName} \
                            http://121.138.156.44:8080/manager/text/deploy?path=/context-path&update=true
                    """
                }
            }
        }
    }

    post {
        success {
            echo "${env.DEPLOY_PROFILE_NAME} - Deploy Success!"
        }
    }
}
